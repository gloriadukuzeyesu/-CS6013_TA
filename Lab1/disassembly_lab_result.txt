Name: Gloria Dukuzeyesu
Lab1: Disassemby Lab

Question 1

#include <cstdio>

template <typename T>
T add(T x, T y) {
	return x + y;
}

int main (int argc, char** argv) {
	printf("%d", add<int>(4,6));
}


Question 2: 

.LC0:
        .string "%d"
main:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     DWORD PTR [rbp-4], edi
        mov     QWORD PTR [rbp-16], rsi
        mov     esi, 6
        mov     edi, 4
        call    int add<int>(int, int)
        mov     esi, eax
        mov     edi, OFFSET FLAT:.LC0
        mov     eax, 0
        call    printf
        mov     eax, 0
        leave
        ret
int add<int>(int, int):
        push    rbp
        mov     rbp, rsp
        mov     DWORD PTR [rbp-4], edi
        mov     DWORD PTR [rbp-8], esi
        mov     edx, DWORD PTR [rbp-4]
        mov     eax, DWORD PTR [rbp-8]
        add     eax, edx
        pop     rbp
        ret

Explanations for the above generated assemby 
.LCO: is a label that shows the string constant, "%d" passed in the printf function
main: is also a label that shows the beginning of main funcction of the program.
push rbp : this is saving the value of the base pointer to the stack.After push rbp is executed, the current value of the base pointer will be pushed to the top of the stack , hence creates a new stack frame while preserving the previous  value of the base pointer.

line: `mov rbp, rsp` : This moves the value of stack pointer (rsp) into the base pointer (rbp). Both instructions `push rbp` and `mov rbp, rsp` are kown as prologue which is a stack setup process which involves saving the base pointer to the stack and overwrite it with sp

line: `sub rsp, 16` this substracts 16 from rsp pointer, to create 16 bytes of space on the stack for the function call. The stack grows going downward. 

line: `mov DWORD PTR [rbp-4], edi` This will move the value of register edi into the memory address rbp-4 (which is base pointer minus 4 bytes). DWORD PTR (Double word pointer) means that the location of the memory is 32 bits in size. 


line: `mov  QQOES PTR[rbp-16], rsi` This will move value of register rsi into the mememory addres rbp-16. 

line `move esi, 6` this is moving the value of 6 (argument passed into add function)into esi register. 

line `move edi,4` this means that value 4 is bine stored in edi register

line `call int add<int>(int, int)` : this means that add is being called with two arguments stored in registers esi and edi as it appears on two previous lines


line `mov esi, eax` : means that the value stored in eax is being moved to esi register. The results from calling add function were stored in eax and on this line eax value is being copied into esi register. 

line `mov eax,0)`: this the moving the 0 into eax register. eax value is set to 0 to ensure that printf makes an appropiate syscall. 

line: `call printf` : this line is calling printf function. 

line : mov eax, 0 : eax value is set to 0.

line: leave: this restoring the value of the base pointer into stack pointer and pops the value of rbp from the stack. This action is the reverse of the first action that was done to allocate the space on the stack frame. This action deallocate the stack from created on line `push rbp` and `mov rbp, rsp`. 

line : `ret` this returning from main function 


The next 9 lines are from add function 

line: `push rbp` saves the value of the base pointer (rbp) on the stack.

line: `mov rbp, rsp` this line is moving the  the value of the stack pointer (rsp) into the base pointer (rbp).

line: `mov DWORD PTR [rbp-4], edi` . This is storing the valie of edi register into the memory location of the address rbp-4. This is locatin is at the baser pointer locatin minus 4 bytes. It is bytes because the add functions is working with integers. Double word pointer means that that location a 32 bits in size. This instruction is storing the first argument that was passsed to function in edi register to that specific location. 

line: mov DWORD PTR [rbp-8], esi`. This also means that edi values is being stored at the memory location pointed by the base pointer minus 8 bytes. This means that the second argument passed to function (previously stored in esi) is being moved to an offest of 8 bytes from the base pointer. 

line `mov edx, DWORD PTR [rpv-4]` and line `move eax, DWORD PTR [rpv-8]` are two instructions that are loading the integers back to edx and eax registers respectively so that the add function can use them to compute the sum 

line `add eax, edx` add function adds two values stores in eax and edx and stores the sum to eax.


line: pop rbp : this restores back the values pointed by the base pointer from the stack

line: ret : this returns from the add function. Giving the control back to the caller function which is main in this case.



Question 4: Generated assemly using compilation flag of -O3 -std=c++17

.LCO:
	.string"%d"
main:
	sub	rsp,8
	mov	esi,10
	mov	edi, OFFSET FLAT:.LCO
	xor	eax, eax
	call 	printf
	xor	eax, eax
	add	rsp,8
	ret



Question 5

The assembly has been optimized by setting the compilation flag to -O3. The Compiler has eliminated some instructions resulting into a more optimized assembly. Changes that have occured include elimating the function call. The compiler knows the two arguments for the add function.And the resuls from add function is stored in esi register ( on the fourth line: `mov esi, 10) and then to be used later by printf. Also, there is new instruction `xor eax, eax` which is setting the value of eax to 0. The first xor eax, eax was to xor the value of eax to 0 to make sure that prinf does the system call appropriately and the second one was the return value from main. 


